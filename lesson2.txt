What happens when you initialize a repository? Why do you need it? 

When you initialize a repository, you create a space where you can make commits to keep track of your projects.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where the files are put once they are ready to be commited. It helps the user organize their files. The working directory is like scratch paper in a math test, it is a place where you problem solve. 


How can you use the staging area to make sure you have one commit per logical change? 

You can use git diff--staged to see the changes that have been made between the the staging area and the most recent commit to see how how much has changed.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situations where branches would be helpful in keeping my history organized would be if I were creating different versions of the same project. The branches allow me to make commits in one branch while keeping the other branches intact. 

They also help you stay organized when you want to share a project with the public. The master branch is the one that never breaks. The other branches would be used for unique features or when you are experimenting and expect them to break. 


How do the diagrams help you visualize the branch structure?
THe diagrams make it more clear to see the relationships between each branch. It clearly shows where the branches took place in the master branch. The list format given to us by typing git log --graph --online is helpful but with the details but its faster to read the breaks in a diagram. 


What is the result of merging two branches together? WHy do we represent it in the deagram the way we do?

When two branches are merged, nothing gets deleted, instead all the commits are combined into one branch and organized by time stamps. They are represented as one line in the diagram because it is the easiest way to illustrate the merging of the two branches. 


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Generally, automatic merging works wonderfully when there are no conflicts or branches that have not made changes to the same files. Git will merge all the commits from the two branches and organize them by the time they were commited. When Two branches have a common file that have been changed, automatic merging does not work and gives a conflict detection warning. When this happens, the user has to look through the conflicting files and judge which changes to keep and which to delete. This can seem tedious to the user if the changes he/she wants to keep seem pretty straight forward but Git cannot make those types of judgement calls and can just point out that a there are conflicts in a file.  